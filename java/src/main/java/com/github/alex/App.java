/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.alex;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import com.google.protobuf.Int64Value;
import org.tensorflow.framework.DataType;
import org.tensorflow.framework.TensorProto;
import org.tensorflow.framework.TensorShapeProto;
import org.tensorflow.framework.TensorShapeProto.Dim;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import tensorflow.serving.Model.ModelSpec;
import tensorflow.serving.Predict.PredictRequest;
import tensorflow.serving.Predict.PredictResponse;
import tensorflow.serving.PredictionServiceGrpc;
import tensorflow.serving.PredictionServiceGrpc.PredictionServiceBlockingStub;
import tensorflow.serving.PredictionServiceGrpc.PredictionServiceStub;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        PredictRequest.Builder requestBuilder = PredictRequest.newBuilder();

        ModelSpec.Builder modelSpecBuilder = ModelSpec.newBuilder();
        modelSpecBuilder.setSignatureName("serving_default");
        modelSpecBuilder.setName("first_model");
        modelSpecBuilder.setVersion(Int64Value.newBuilder().setValue(0L));
        requestBuilder.setModelSpec(modelSpecBuilder.build());

        TensorProto.Builder tensorProtoBuilder = TensorProto.newBuilder();
        tensorProtoBuilder.setDtype(DataType.DT_INT64);
        Dim[] dim = {Dim.newBuilder().setSize(1).build(), Dim.newBuilder().setSize(31).build()};
        tensorProtoBuilder
                .setTensorShape(TensorShapeProto.newBuilder().addAllDim(Arrays.asList(dim)));
        // tensorProtoBuilder.setTensorShape(TensorShapeProto.newBuilder()
        // .addDim(Dim.newBuilder().setSize(1)).addDim(Dim.newBuilder().setSize(31)));
        Long[] inputs = {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
                1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L};
        tensorProtoBuilder.addAllInt64Val(Arrays.asList(inputs));
        requestBuilder.putInputs("input_1", tensorProtoBuilder.build());

        PredictRequest request = requestBuilder.build();
        System.out.println(request);

        String target = "127.0.0.1:8500";
        // Create a communication channel to the server, known as a Channel. Channels are
        // thread-safe and reusable. It is common to create channels at the beginning of your
        // application and reuse them until the application shuts down.
        ManagedChannel channel = ManagedChannelBuilder.forTarget(target)
                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to
                // avoid needing certificates.
                .usePlaintext().build();
        PredictionServiceBlockingStub stub = PredictionServiceGrpc.newBlockingStub(channel);
        try {
            PredictResponse response = stub.predict(request);
            System.out.println(response);
            channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
